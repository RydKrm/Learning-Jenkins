pipeline {
    agent any

    parameters {
        booleanParam(
            name: 'IS_DEPLOY',
            defaultValue: false,
            description: 'Check to deploy after build'
        )
        choice(
            name: 'ENVIRONMENT',
            choices: ['test', 'prod'],
            description: 'Choose the environment for testing or deployment'
        )
    }

    environment {
        NPM_CONFIG_CACHE = "${WORKSPACE}/.npm"
        HOME            = "${WORKSPACE}"
        PORT            = "3030"
        JWT_SECRET      = "your_jwt_secret"
    }

    stages {

        stage('Confirm Parameters') {
            steps {
                echo "‚û°Ô∏è Parameter values:"
                echo "   IS_DEPLOY   = ${params.IS_DEPLOY}"
                echo "   ENVIRONMENT = ${params.ENVIRONMENT}"
            }
        }

        stage('Checkout') {
            steps {
                echo 'üì• Pulling code from GitHub...'
                checkout scm
                sh 'pwd && ls -la'
            }
        }

        stage('Get Branch Name') {
            steps {
                script {
                    def branchName = env.GIT_BRANCH ?: sh(
                        script: "git rev-parse --abbrev-ref HEAD",
                        returnStdout: true
                    ).trim()
                    echo "üåø Running on branch: ${branchName}"
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'üì¶ Installing Node.js dependencies...'
                sh 'npm cache clean --force'
                sh 'npm install'
                sh 'node -v && npm -v'
            }
        }

        stage('Test') {
            when {
                expression { params.ENVIRONMENT == 'test' }
            }
            steps {
                echo 'üß™ Running tests (test environment)...'
                sh 'npm install --save-dev jest'
                sh 'npm test'
            }
            post {
                always {
                    archiveArtifacts artifacts: 'coverage/**/*', allowEmptyArchive: true
                }
            }
        }

        stage('Build') {
            steps {
                echo '‚öíÔ∏è Building the application...'
                sh 'npm run build || echo "No build script found"'
            }
        }

        stage('Deploy') {
            when {
                expression { params.IS_DEPLOY && params.ENVIRONMENT == 'prod' }
            }
            steps {
                echo 'üöÄ Deploying the application (production)...'
                sh '''
                    echo "Starting deployment process..."
                    # Example deployment: copy files, restart service, or docker run
                    echo "Application deployed successfully!"
                    echo "Deployment time: $(date)"
                '''
            }
        }
    }

    post {
        always {
            echo '‚úÖ Pipeline execution completed'
        }
        success {
            echo 'üéâ Pipeline succeeded!'
        }
        failure {
            echo '‚ùå Pipeline failed!'
        }
        unstable {
            echo '‚ö†Ô∏è Pipeline is unstable'
        }
    }
}
