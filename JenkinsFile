pipeline {
    agent any

    parameters {
        booleanParam(name: 'IS_DEPLOY', defaultValue: false, description: 'Deploy the application after build')
        choice(name: 'ENVIRONMENT', choices: ['test', 'prod'], description: 'Select the environment')
    }

    environment {
        NPM_CONFIG_CACHE = "${WORKSPACE}/.npm"
        HOME            = "${WORKSPACE}"
        PORT            = "3030"
        JWT_SECRET      = "your_jwt_secret"
        BRANCH_NAME     = "" // will fill dynamically
    }

    stages {

        stage('Checkout') {
            steps {
                echo 'Pulling code from GitHub...'
                checkout scm
                script {
                    // capture branch name dynamically
                    env.BRANCH_NAME = sh(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()
                    echo "Checked out branch: ${env.BRANCH_NAME}"
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'Installing Node.js dependencies...'
                sh 'npm cache clean --force'
                sh 'npm install'
                sh 'node -v && npm -v'
            }
        }

        stage('Test') {
            steps {
                echo "Running tests on branch: ${env.BRANCH_NAME} in ${params.ENVIRONMENT} environment"
                sh 'npm install --save-dev jest'
                sh 'npm test'
            }
            post {
                always {
                    archiveArtifacts artifacts: 'coverage/**/*', allowEmptyArchive: true
                }
            }
        }

        stage('Build') {
            steps {
                echo 'Building the application...'
                sh 'npm run build || echo "No build script found"'
            }
        }

        stage('Deploy') {
            when {
                allOf {
                    expression { params.IS_DEPLOY == true }
                    expression { params.ENVIRONMENT == 'prod' }
                }
            }
            steps {
                echo "Deploying the application to ${params.ENVIRONMENT} environment..."
                sh '''
                    echo "Starting deployment process..."
                    # Example deployment: copy files, restart service, or docker run
                    echo "Application deployed successfully!"
                    echo "Deployment time: $(date)"
                '''
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution completed'
        }
        success {
            echo 'Pipeline succeeded! üéâ'
        }
        failure {
            echo 'Pipeline failed! ‚ùå'
        }
        unstable {
            echo 'Pipeline is unstable ‚ö†Ô∏è'
        }
    }
}
